'use strict';

var spawnSync = require('child_process').spawnSync;
var sync_request = require('sync-request');

var info = require('./info');
var state = require('./state');
var construct = require('./construct');
var util = require('./util');

var exec = {
    cli_sync: function(doc) {
        /* Execute a synchronous call to the ly command line script.
        Optional parameter:
        - doc:
        a string with LilyPond input to be processed.
        If this is not provide we'll take the previously used value,
        which is initialized to an empty string.
        */

        if (!info.methods().cli) {
            throw "CLI not available";
        }

        if (!state.prepared.params) {
            throw "Call the prepare() method before calling exec_cli()!"
        }

        construct.make_cli();
        if (doc) {
            state.request.doc = doc;
        }

        var run_cl = spawnSync("ly", state.cl_opts, { "input": state.request.doc});
        if (run_cl.stderr != "") {
            /* TODO: throw the error again when the situation is checked.
            Currently we have an error:
            close failed in file object destructor:
            sys.excepthook is missing
            lost sys.stderr
            It is not clear whether this is created in ly or in Node.
            */
            console.log(run_cl.stderr.toString());
        };
        return run_cl.stdout.toString().trim();
    },

    server_sync: function(doc) {

        if (!info.methods().server_running && !util.start_server()) {
            throw "Server not running at " + util.server.url();
        }

        if (!state.prepared.params) {
            throw "Call the prepare() method before calling exec_server()!"
        }

        construct.make_server();
        if (doc) {
            state.request.doc = doc
        }
        state.request_json.data = state.request.doc

        try {
            var res = sync_request('POST',
            util.server.url(), {
                json: state.request_json
            });
        }
        catch (e){
            console.log(e);
            return "";
        };
        return res.body.toString();

    },

    sync: function(doc) {
        /* Execute a python-ly command, trying first to get if from
        ly-server, and if that's not available fall back to the CLI.
        For now we directly go for the _cli function but want to have
        the interface ready.
        */
        var func = null;
        if (info.methods().server_running || util.start_server()) {
            func = exec.server_sync;
            console.log("Using server");
        }
        else if (info.methods().cli_available) {
            func = exec.cli;
            console.log("Using CLI");
        }
        else {
            throw "python-ly seems to be unavailable"
        }
        return func(doc);
    },
}

module.exports = exec
